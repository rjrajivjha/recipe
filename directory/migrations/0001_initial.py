# Generated by Django 3.2.18 on 2023-05-03 15:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MealTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeatTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('pdf_number', models.CharField(blank=True, max_length=128, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('alternate_name', models.CharField(blank=True, max_length=128, null=True)),
                ('recipe_type', models.CharField(choices=[('veg', 'Veg'), ('non-veg', 'Non Veg')], default=None, max_length=128, null=True)),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('meat_category', models.CharField(choices=[('red', 'Red'), ('white', 'White')], default=None, max_length=128, null=True)),
                ('serving_quantity', models.CharField(blank=True, max_length=128, null=True)),
                ('serving_quantity_unit', models.CharField(blank=True, max_length=128, null=True)),
                ('min_serve', models.CharField(blank=True, max_length=128, null=True)),
                ('max_serve', models.CharField(blank=True, max_length=128, null=True)),
                ('cookware', models.TextField(blank=True, default=None, null=True)),
                ('calories', models.CharField(blank=True, max_length=128, null=True)),
                ('cooking', models.TextField(blank=True, default=None, null=True)),
                ('pre_cooking', models.TextField(blank=True, default=None, null=True)),
                ('cook_tip', models.TextField(blank=True, default=None, null=True)),
                ('serve_tip', models.TextField(blank=True, default=None, null=True)),
                ('others_tip', models.TextField(blank=True, default=None, null=True)),
                ('cook_time', models.CharField(blank=True, max_length=128, null=True)),
                ('prep_time', models.CharField(blank=True, max_length=128, null=True)),
                ('soak_time', models.CharField(blank=True, max_length=128, null=True)),
                ('marinate_time', models.CharField(blank=True, max_length=128, null=True)),
                ('total_time', models.CharField(blank=True, max_length=128, null=True)),
                ('energy', models.CharField(blank=True, max_length=128, null=True)),
                ('k_cal', models.CharField(blank=True, max_length=128, null=True)),
                ('cal', models.CharField(blank=True, max_length=128, null=True)),
                ('carbohydrate', models.CharField(blank=True, max_length=128, null=True)),
                ('sugars', models.CharField(blank=True, max_length=128, null=True)),
                ('fat', models.CharField(blank=True, max_length=128, null=True)),
                ('saturated_fat', models.CharField(blank=True, max_length=128, null=True)),
                ('cholesterol', models.CharField(blank=True, max_length=128, null=True)),
                ('calcium', models.CharField(blank=True, max_length=128, null=True)),
                ('fibre', models.CharField(blank=True, max_length=128, null=True)),
                ('sodium', models.CharField(blank=True, max_length=128, null=True)),
                ('cuisine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.cuisine')),
                ('meal_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.mealtypes')),
                ('meat_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.meattypes')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('comments', models.TextField(blank=True, default=None, null=True)),
                ('unit_value', models.CharField(default=None, max_length=128, null=True)),
                ('unit_data_type', models.CharField(choices=[('number', 'Number'), ('string', 'String')], default=None, max_length=128, null=True)),
                ('unit_type', models.CharField(choices=[('gm', 'Gm'), ('oz', 'Oz'), ('ml', 'Ml'), ('pound', 'Pound'), ('kg', 'Kg'), ('cubes', 'Cubes'), ('pints', 'Pints'), ('tbsp', 'Tbsp'), ('tsp', 'Tsp'), ('lb', 'Lb'), ('cm', 'Cm'), ('cups', 'Cups'), ('inch', 'Inch'), ('bowl', 'Bowl'), ('pinch', 'Pinch'), ('litres', 'Litres'), ('count', 'Count'), ('cakes', 'Cakes'), ('piece', 'Piece'), ('squares', 'Squares'), ('stalks', 'Stalks'), ('dsp', 'Dsp'), ('slices', 'Slices'), ('flakes', 'Flakes'), ('bunch', 'Bunch'), ('whole heads', 'Whole Heads'), ('for taste', 'For Taste'), ('part', 'Part'), ('heaped tsp', 'Heaped Tsp'), ('catty', 'Catty')], default=None, max_length=128, null=True)),
                ('variation', models.TextField(blank=True, default=None, null=True)),
                ('alternate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alternate', to='directory.ingredients')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='directory.ingredients')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='directory.recipe')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
